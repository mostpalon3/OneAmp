// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String         @default("")
  image         String         @default("")
  provider      Provider
  streams       Stream[]
  upvotes       Upvote[]
  downvotes     Downvote[]
  createdAt     DateTime       @default(now())
}

model Stream{
  id             String         @id @default(uuid())
  type           StreamType
  url            String
  extractedId    String
  title          String         @default("")
  artist         String         @default("")
  smallImg       String         @default("")
  bigImg         String         @default("")
  duration       Int            @default(0)
  active         Boolean        @default(true)
  played         Boolean        @default(false)
  upvotes        Upvote[]       
  downvotes      Downvote[]     
  createdAt      DateTime       @default(now())
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentStream  CurrentStream? 
  submittedBy    String          @default("anonymous")
}

model CurrentStream {
  userId        String          @id
  streamId      String?         @unique
  stream        Stream?         @relation(fields: [streamId], references: [id], onDelete: Cascade)
}

model Upvote{
  id            String         @id @default(uuid())
  userId        String
  streamId      String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  stream        Stream         @relation(fields: [streamId], references: [id], onDelete: Cascade)
  @@unique([userId, streamId])
}
model Downvote{
  id            String         @id @default(uuid())
  userId        String
  streamId      String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  stream        Stream         @relation(fields: [streamId], references: [id], onDelete: Cascade)
  @@unique([userId, streamId])
}

enum StreamType {
  Spotify
  YouTube
}
enum Provider {
  GOOGLE
}